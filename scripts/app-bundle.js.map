{"version":3,"sources":["app.js","environment.js","main.js","api/api.js","api/user.js","resources/index.js"],"names":["App","userApi","_users","count","message","activate","getAll","then","users","get","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","BASE_URL","Api","http","withBaseUrl","withInterceptor","request","console","log","method","url","response","status","Error","responseType","fetch","toLowerCase","json","text","put","payload","body","JSON","stringify","headers","post","delete","UserApi","api"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject, computedFrom } from 'aurelia-framework';\nimport { UserApi } from 'api/user';\n\n@inject(UserApi)\nexport class App {\n    constructor(userApi) {\n        this.userApi = userApi;\n        this._users = [];\n        this.count = 0;\n        this.message = 'Hello World!';\n    }\n\n    activate(count) { \n        return this.userApi.getAll(count)\n            .then(users => this._users = users);\n    }\n\n    get() {\n        return this._users;\n    }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport 'jquery';\nimport 'bootstrap';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { inject } from 'aurelia-framework';\r\nimport { HttpClient } from 'aurelia-fetch-client';\r\nimport 'whatwg-fetch';\r\n\r\nlet BASE_URL = 'https://randomuser.me/api';\r\n\r\n@inject(HttpClient)\r\nexport class Api {\r\n    constructor(http) {\r\n        http.configure(config => {\r\n            config\r\n                .withBaseUrl(BASE_URL)\r\n                // .withDefaults({\r\n                //     credentials: 'include'\r\n                // })\r\n                .withInterceptor({\r\n                    request(request) {\r\n                        console.log(`Intercepted request using method: ${request.method} with URL: ${request.url}`);\r\n                        return request;\r\n                    },\r\n                    response(response) {\r\n                        console.log(`Intercepted response ${response.status} using URL: ${response.url}`);\r\n                        if (response.status > 299 || response.status < 200){\r\n                            throw Error(`${response.status}`);\r\n                        }\r\n                        return response;\r\n                    }\r\n                });\r\n        });\r\n        this.http = http;\r\n    }\r\n\r\n    get(url, responseType = 'json'){\r\n        return this.http.fetch(url)\r\n            .then(response => {\r\n                 switch(responseType.toLowerCase()){\r\n                    case 'json': \r\n                        return response.json();\r\n                    case 'text': \r\n                        return response.text();\r\n                    default: \r\n                        return response.json();\r\n                }\r\n            })\r\n    }\r\n    put(url, payload, responseType = 'text'){       \r\n        //TODO: Test to make sure this works. Not tested yet\r\n        // var data = new FormData();\r\n        // data.append( \"json\", JSON.stringify( payload ) );\r\n        return this.http.fetch(url,\r\n            {\r\n                method: \"put\",\r\n                body: JSON.stringify(payload),\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(response => {\r\n                switch(responseType.toLowerCase()){\r\n                    case 'json': \r\n                        return response.json();\r\n                    default: \r\n                        return response.text();\r\n                }\r\n            })\r\n    }\r\n    post(){\r\n        throw Error('Not yet implemented');\r\n    }\r\n    delete(url){\r\n        //TODO: Test to make sure this works. Not tested yet\r\n        return this.http.fetch(url,\r\n            {\r\n                method: \"delete\",\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { Api } from './api';\r\n\r\n@inject(Api)\r\nexport class UserApi {\r\n    constructor(api) {\r\n        this.api = api;\r\n    }\r\n\r\n    getAll(count) {\r\n        // return this.api.get(\"/?nat=us\");\r\n        return this.api.get(`/?nat=us&results=${count}`);\r\n    }\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}