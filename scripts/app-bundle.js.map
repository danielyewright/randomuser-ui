{"version":3,"sources":["app.js","environment.js","main.js","api/api.js","api/user.js","resources/index.js"],"names":["App","userApi","nationalities","value","name","_users","count","nat","output","busy","getUsers","getAll","then","users","JSON","stringify","results","get","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","BASE_URL","Api","http","withBaseUrl","withInterceptor","request","console","log","method","url","response","status","Error","responseType","fetch","toLowerCase","json","text","put","payload","body","headers","post","delete","UserApi","api"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject, computedFrom } from 'aurelia-framework';\r\nimport { UserApi } from 'api/user';\r\n\r\n@inject(UserApi)\r\nexport class App {\r\n    nationalities = [\r\n        { value: 'au', name: 'AU' },\r\n        { value: 'br', name: 'BR' },\r\n        { value: 'ca', name: 'CA' },\r\n        { value: 'ch', name: 'CH' },\r\n        { value: 'de', name: 'DE' },\r\n        { value: 'dk', name: 'DK' },\r\n        { value: 'es', name: 'ES' },\r\n        { value: 'fi', name: 'FI' },\r\n        { value: 'fr', name: 'FR' },\r\n        { value: 'gb', name: 'GB' },\r\n        { value: 'ie', name: 'IE' },\r\n        { value: 'ir', name: 'IR' },\r\n        { value: 'nl', name: 'NL' },\r\n        { value: 'nz', name: 'NZ' },\r\n        { value: 'tr', name: 'TR' },\r\n        { value: 'us', name: 'US' }\r\n    ];\r\n\r\n    constructor(userApi) {\r\n        this.userApi = userApi;\r\n        this._users = [];\r\n        this.count = 0;\r\n        this.nat = '';\r\n        this.output = '';\r\n        this.busy = false;\r\n    }\r\n\r\n    getUsers(count, nat) {\r\n        if (this.count > 5000) {\r\n            // Used only if 'disabled' binding is not present on button\r\n            // alert(\"Please enter a value less than or equal to 5,000.\");\r\n            return false;\r\n        }\r\n        else {\r\n            return this.userApi.getAll(count, nat)\r\n                .then(users => this._users = users, this.busy = true)\r\n                .then(users => {\r\n                    this.output = JSON.stringify(users.results);\r\n                    this.busy = false;\r\n                    this.count = 0;\r\n                    this.nat = '';\r\n                })\r\n        }\r\n    }\r\n\r\n    get() {\r\n        return this._users;\r\n    }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport 'jquery';\nimport 'bootstrap';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { inject } from 'aurelia-framework';\r\nimport { HttpClient } from 'aurelia-fetch-client';\r\nimport 'whatwg-fetch';\r\n\r\nlet BASE_URL = 'https://randomuser.me/api';\r\n\r\n@inject(HttpClient)\r\nexport class Api {\r\n    constructor(http) {\r\n        http.configure(config => {\r\n            config\r\n                .withBaseUrl(BASE_URL)\r\n                // .withDefaults({\r\n                //     credentials: 'include'\r\n                // })\r\n                .withInterceptor({\r\n                    request(request) {\r\n                        console.log(`Intercepted request using method: ${request.method} with URL: ${request.url}`);\r\n                        return request;\r\n                    },\r\n                    response(response) {\r\n                        console.log(`Intercepted response ${response.status} using URL: ${response.url}`);\r\n                        if (response.status > 299 || response.status < 200){\r\n                            throw Error(`${response.status}`);\r\n                        }\r\n                        return response;\r\n                    }\r\n                });\r\n        });\r\n        this.http = http;\r\n    }\r\n\r\n    get(url, responseType = 'json'){\r\n        return this.http.fetch(url)\r\n            .then(response => {\r\n                 switch(responseType.toLowerCase()){\r\n                    case 'json': \r\n                        return response.json();\r\n                    case 'text': \r\n                        return response.text();\r\n                    default: \r\n                        return response.json();\r\n                }\r\n            })\r\n    }\r\n    put(url, payload, responseType = 'text'){       \r\n        //TODO: Test to make sure this works. Not tested yet\r\n        // var data = new FormData();\r\n        // data.append( \"json\", JSON.stringify( payload ) );\r\n        return this.http.fetch(url,\r\n            {\r\n                method: \"put\",\r\n                body: JSON.stringify(payload),\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n            })\r\n            .then(response => {\r\n                switch(responseType.toLowerCase()){\r\n                    case 'json': \r\n                        return response.json();\r\n                    default: \r\n                        return response.text();\r\n                }\r\n            })\r\n    }\r\n    post(){\r\n        throw Error('Not yet implemented');\r\n    }\r\n    delete(url){\r\n        //TODO: Test to make sure this works. Not tested yet\r\n        return this.http.fetch(url,\r\n            {\r\n                method: \"delete\",\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { Api } from './api';\r\n\r\n@inject(Api)\r\nexport class UserApi {\r\n    constructor(api) {\r\n        this.api = api;\r\n    }\r\n\r\n    // TODO: Add extra params for controlling returned data\r\n    getAll(count, nat) {\r\n        return this.api.get(`/?results=${count}&nat=${nat}`);\r\n    }\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}