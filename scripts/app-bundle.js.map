{"version":3,"sources":["app.js","environment.js","main.js","api/api.js","api/user.js","resources/index.js"],"names":["App","userApi","nationalities","value","name","_users","count","nat","output","activate","getUsers","getAll","then","users","JSON","stringify","results","get","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","BASE_URL","Api","http","withBaseUrl","withInterceptor","request","console","log","method","url","response","status","Error","responseType","fetch","toLowerCase","json","text","put","payload","body","headers","post","delete","UserApi","api"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { inject, computedFrom } from 'aurelia-framework';\nimport { UserApi } from 'api/user';\n\n@inject(UserApi)\nexport class App {\n    nationalities = [\n        { value: 'au', name: 'AU' },\n        { value: 'br', name: 'BR' },\n        { value: 'ca', name: 'CA' },\n        { value: 'ch', name: 'CH' },\n        { value: 'de', name: 'DE' },\n        { value: 'dk', name: 'DK' },\n        { value: 'es', name: 'ES' },\n        { value: 'fi', name: 'FI' },\n        { value: 'fr', name: 'FR' },\n        { value: 'gb', name: 'GB' },\n        { value: 'ie', name: 'IE' },\n        { value: 'ir', name: 'IR' },\n        { value: 'nl', name: 'NL' },\n        { value: 'nz', name: 'NZ' },\n        { value: 'tr', name: 'TR' },\n        { value: 'us', name: 'US' }\n    ];\n\n    constructor(userApi) {\n        this.userApi = userApi;\n        this._users = [];\n        this.count = 0;\n        this.nat = '';\n        this.output = '';\n    }\n\n    activate() { }\n\n    getUsers(count, nat) {\n        return this.userApi.getAll(count, nat)\n            .then(users => this._users = users)\n            .then(users => {\n                this.output = JSON.stringify(users.results);\n            })\n    }\n\n    get() {\n        return this._users;\n    }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport 'jquery';\nimport 'bootstrap';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { inject } from 'aurelia-framework';\nimport { HttpClient } from 'aurelia-fetch-client';\nimport 'whatwg-fetch';\n\nlet BASE_URL = 'https://randomuser.me/api';\n\n@inject(HttpClient)\nexport class Api {\n    constructor(http) {\n        http.configure(config => {\n            config\n                .withBaseUrl(BASE_URL)\n                // .withDefaults({\n                //     credentials: 'include'\n                // })\n                .withInterceptor({\n                    request(request) {\n                        console.log(`Intercepted request using method: ${request.method} with URL: ${request.url}`);\n                        return request;\n                    },\n                    response(response) {\n                        console.log(`Intercepted response ${response.status} using URL: ${response.url}`);\n                        if (response.status > 299 || response.status < 200){\n                            throw Error(`${response.status}`);\n                        }\n                        return response;\n                    }\n                });\n        });\n        this.http = http;\n    }\n\n    get(url, responseType = 'json'){\n        return this.http.fetch(url)\n            .then(response => {\n                 switch(responseType.toLowerCase()){\n                    case 'json': \n                        return response.json();\n                    case 'text': \n                        return response.text();\n                    default: \n                        return response.json();\n                }\n            })\n    }\n    put(url, payload, responseType = 'text'){       \n        //TODO: Test to make sure this works. Not tested yet\n        // var data = new FormData();\n        // data.append( \"json\", JSON.stringify( payload ) );\n        return this.http.fetch(url,\n            {\n                method: \"put\",\n                body: JSON.stringify(payload),\n                headers: {\n                    'Content-type': 'application/json'\n                }\n            })\n            .then(response => {\n                switch(responseType.toLowerCase()){\n                    case 'json': \n                        return response.json();\n                    default: \n                        return response.text();\n                }\n            })\n    }\n    post(){\n        throw Error('Not yet implemented');\n    }\n    delete(url){\n        //TODO: Test to make sure this works. Not tested yet\n        return this.http.fetch(url,\n            {\n                method: \"delete\",\n            })\n            .then(response => {\n                return response.json()\n            })\n    }\n}","import { inject } from 'aurelia-framework';\nimport { Api } from './api';\n\n@inject(Api)\nexport class UserApi {\n    constructor(api) {\n        this.api = api;\n    }\n\n    // TODO: Add extra params for controlling returned data\n    getAll(count, nat) {\n        return this.api.get(`/?results=${count}&nat=${nat}`);\n    }\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}